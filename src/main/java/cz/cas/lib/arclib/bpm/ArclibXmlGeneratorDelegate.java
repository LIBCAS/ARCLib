package cz.cas.lib.arclib.bpm;

import cz.cas.lib.arclib.domain.*;
import cz.cas.lib.arclib.domain.ingestWorkflow.IngestWorkflow;
import cz.cas.lib.arclib.domain.ingestWorkflow.IngestWorkflowState;
import cz.cas.lib.arclib.index.IndexArclibXmlStore;
import cz.cas.lib.arclib.index.solr.arclibxml.IndexedArclibXmlDocumentState;
import cz.cas.lib.arclib.index.solr.arclibxml.SolrArclibXmlDocument;
import cz.cas.lib.arclib.service.UserService;
import cz.cas.lib.arclib.service.arclibxml.ArclibXmlGenerator;
import cz.cas.lib.arclib.service.fixity.Sha512Counter;
import cz.cas.lib.arclib.store.IngestWorkflowStore;
import cz.cas.lib.arclib.store.ProducerStore;
import cz.cas.lib.core.store.Transactional;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.camunda.bpm.engine.delegate.DelegateExecution;
import org.camunda.bpm.engine.delegate.JavaDelegate;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.springframework.stereotype.Service;

import javax.inject.Inject;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;

import static cz.cas.lib.arclib.utils.ArclibUtils.prettyPrint;
import static cz.cas.lib.core.util.Utils.bytesToHexString;

@Slf4j
@Service
public class ArclibXmlGeneratorDelegate extends ArclibDelegate implements JavaDelegate {

    private IndexArclibXmlStore indexArclibXmlStore;
    private ArclibXmlGenerator arclibXmlGenerator;
    private IngestWorkflowStore ingestWorkflowStore;
    private Sha512Counter sha512Counter;
    private UserService userService;
    private ProducerStore producerStore;
    @Getter
    private String toolName = "ARCLib_" + IngestToolFunction.metadata_modification;

    /**
     * Generates ArclibXml according to the BPM variables stored in the <code>execution</code> and changes processingState of
     * ingest workflow to PROCESSED.
     */
    @Transactional
    @Override
    public void execute(DelegateExecution execution) throws DocumentException, IOException {
        String ingestWorkflowExternalId = getIngestWorkflowExternalId(execution);
        log.debug("Execution of ArclibXml generator delegate started for ingest workflow " + ingestWorkflowExternalId + ".");

        String extractedMetadata = new String((byte[]) execution.getVariable(BpmConstants.MetadataExtraction.result));

        //prepend the metadata generated by Arclib
        Document arclibXml = arclibXmlGenerator.generateMetadata(extractedMetadata, execution.getVariables());
        
        //store arclib xml to index
        String producerId = (String) execution.getVariable(BpmConstants.ProcessVariables.producerId);
        String responsiblePerson = (String) execution.getVariable(BpmConstants.ProcessVariables.responsiblePerson);
        User user = userService.find(responsiblePerson);
        Producer producer = producerStore.find(producerId);
        indexArclibXmlStore.createIndex(prettyPrint(arclibXml), producer, user, IndexedArclibXmlDocumentState.PROCESSED, isInDebugMode(execution));
        String externalId = (String) execution.getVariable(BpmConstants.ProcessVariables.ingestWorkflowExternalId);
        log.debug("ArclibXml of IngestWorkflow with external id " + externalId + " has been indexed.");

        Map<String, Object> arclibXmlIndexDocument = indexArclibXmlStore.findArclibXmlIndexDocument(ingestWorkflowExternalId);
        String indexedArclibXml = (String) ((ArrayList) arclibXmlIndexDocument.get(SolrArclibXmlDocument.DOCUMENT)).get(0);

        String arclibXmlHashValue = bytesToHexString(sha512Counter.computeDigest(new ByteArrayInputStream(indexedArclibXml.getBytes())));
        Hash arclibXmlHash = new Hash(arclibXmlHashValue, HashType.Sha512);
        IngestWorkflow ingestWorkflow = ingestWorkflowStore.findByExternalId(ingestWorkflowExternalId);
        ingestWorkflow.setArclibXmlHash(arclibXmlHash);
        log.debug("Hash of ARClibXml of Ingest workflow with external ID " + ingestWorkflowExternalId + ": "
                + arclibXmlHash.getHashValue() + ", hash type: " + arclibXmlHash.getHashType().name());

        ingestWorkflow.setProcessingState(IngestWorkflowState.PROCESSED);
        ingestWorkflowStore.save(ingestWorkflow);
        log.info("State of ingest workflow with external id " + ingestWorkflowExternalId + " has changed to " +
                IngestWorkflowState.PROCESSED.toString() + ".");

        log.debug("Execution of ArclibXml generator delegate finished for ingest workflow " + ingestWorkflowExternalId + ".");
    }

    @Inject
    public void setIndexArclibXmlStore(IndexArclibXmlStore indexArclibXmlStore) {
        this.indexArclibXmlStore = indexArclibXmlStore;
    }

    @Inject
    public void setArclibXmlGenerator(ArclibXmlGenerator arclibXmlGenerator) {
        this.arclibXmlGenerator = arclibXmlGenerator;
    }

    @Inject
    public void setIngestWorkflowStore(IngestWorkflowStore ingestWorkflowStore) {
        this.ingestWorkflowStore = ingestWorkflowStore;
    }

    @Inject
    public void setSha512Counter(Sha512Counter sha512Counter) {
        this.sha512Counter = sha512Counter;
    }

    @Inject
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    @Inject
    public void setProducerStore(ProducerStore producerStore) {
        this.producerStore = producerStore;
    }
}
